package util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class AutoCreate extends Util implements SystemVariables{
	/***
	 * @author xinge1023@163.com
	 * 自动生成java文件类   
	 */
	private static final long serialVersionUID = 1L;
	
	public static void main(String[] args) throws IOException, SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        //自动创建BeanManager对象管理器
		  AutoCreateBeanManager();
		//自动创建Methods方法
		  AutoCreateMethods();
	}
	
	
	
	//自动生成BeanManager.java类
	public static void AutoCreateBeanManager() throws IOException{
		//存放对象列表的List
		List<String> classNameList = new ArrayList<String>();
		classNameList = getClassNameList();
		if(new File(Util_AbsPath+"\\BeanManager.java").exists()){new File(Util_AbsPath+"\\BeanManager.java").delete();}
		File javafile = new File(Util_AbsPath+"\\BeanManager.java");
		OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(javafile, true),"UTF-8");
		osw.write("package " + Util_Package + ";\r\n");
		osw.write("import javax.servlet.http.HttpServlet;\r\n");
		osw.write("import entity.*;\r\n");
		osw.write("public class BeanManager extends HttpServlet{\r\n");
		osw.write("	 /**\r\n");
		osw.write("	 * 对象管理器(负责生成静态对象方法供全局使用)   *单例模式*\r\n");
		osw.write("	 */\r\n");
		osw.write("	     private static final long serialVersionUID = 1L;\r\n");
		osw.write("	     private static BeanManager beanManager;\r\n");
		osw.write("	     public static BeanManager getBeanManager() {\r\n");
		osw.write("	        if (beanManager == null) {\r\n");
		osw.write("	        	beanManager = new BeanManager();\r\n");
		osw.write("	        }\r\n");
		osw.write("	        return beanManager;\r\n");
		osw.write("	    }\r\n");
		osw.write("       private static Util util;\r\n");
		osw.write("       public static Util getUtil() {\r\n");
		osw.write("	        if (util == null) {\r\n");
		osw.write("	        	util = new Util();\r\n");
		osw.write("	        }\r\n");
		osw.write("	        return util;\r\n");
		osw.write("	    }\r\n");
		for(int i=0;i<classNameList.size();i++){
		String lowerName = classNameList.get(i).substring(0,1).toLowerCase()+classNameList.get(i).substring(1);
		osw.write("       //全局"+classNameList.get(i)+"对象\r\n");
		osw.write("       private static "+classNameList.get(i)+" "+lowerName+";\r\n");
		osw.write("       public static "+classNameList.get(i)+" get"+classNameList.get(i)+"() {\r\n");
		osw.write("	        if ("+lowerName+" == null) {\r\n");
		osw.write("	        	"+lowerName+" = new "+classNameList.get(i)+"();\r\n");
		osw.write("	        }\r\n");
		osw.write("	        return "+lowerName+";\r\n");
		osw.write("	    }\r\n");	
		}
		osw.write("}\r\n");
		osw.write("");
		osw.flush();
		osw.close();
		System.out.println("写入文件："+ javafile+ "成功！");
	}
	
	//查询数据返回Object对象(可以查询单表任意n个字段的值,需要修改sql)
	@SuppressWarnings("unchecked")
	public static void  AutoCreateMethods() throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException  {
		//存放对象列表的List
		List<Object> classList = new ArrayList<Object>();
		classList = getClassList();
		if(new File(Util_AbsPath+"\\Methods.java").exists()){new File(Util_AbsPath+"\\Methods.java").delete();}
		File javafile = new File(Util_AbsPath+"\\Methods.java");
		OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(javafile, true),"UTF-8");
		osw.write("package util; \r\n");
		osw.write("import java.lang.reflect.InvocationTargetException; \r\n");
		osw.write("import java.lang.reflect.Method; \r\n");
		osw.write("import java.sql.Connection; \r\n");
		osw.write("import java.sql.PreparedStatement; \r\n");
		osw.write("import java.sql.ResultSet; \r\n");
		osw.write("import java.sql.ResultSetMetaData; \r\n");
		osw.write("import java.sql.SQLException; \r\n");
		osw.write("import java.io.FileNotFoundException;\r\n");
		osw.write("import java.io.IOException;\r\n");
		osw.write("import java.util.ArrayList;\r\n");
		osw.write("import java.util.List;\r\n");
		osw.write("import entity.*; \r\n");
		osw.write("/***\r\n");
		osw.write(" * @author xinge1023@163.com\r\n");
		osw.write(" * 基础的删查方法   \r\n");
		osw.write(" */\r\n");
		osw.write(" public class Methods extends BeanManager implements SystemVariables{\r\n");
		osw.write(" //预编译对象ps\r\n");
		osw.write(" private static PreparedStatement ps=null;\r\n");
		osw.write(" //数据结果集\r\n");
		osw.write(" private static ResultSet rs=null;\r\n");
		osw.write(" //方法集\r\n");
		osw.write(" private static  Method[] methods;\r\n");
		osw.write(" //用于事务的sql\r\n");
		osw.write(" private static String TransactionSql=\"\";\r\n");
		osw.write(" private static final long serialVersionUID = 1L;\r\n");
		for(int p=0;p<classList.size();p++){
		String UobjectName = ((Class)classList.get(p)).getSimpleName();
		String LobjectName = UobjectName.substring(0,1).toLowerCase()+UobjectName.substring(1);
		osw.write(" //通过id获得"+UobjectName+"对象\r\n");
		osw.write(" public static "+UobjectName+" get"+UobjectName+"ById(int id)  throws SecurityException, NoSuchMethodException, InstantiationException, IllegalAccessException, NumberFormatException, IllegalArgumentException, InvocationTargetException, ClassNotFoundException {\r\n");
		osw.write("   boolean isNull = true;\r\n");
		osw.write("   PreparedStatement ps=null;\r\n");
		osw.write("   Class<"+UobjectName+"> c = "+((Class)classList.get(p)).getCanonicalName()+".class;\r\n");
		osw.write("   Object obj = c.newInstance();\r\n");
		osw.write("   // 得到对象类的名字\r\n");
		osw.write("   String cName = c.getName();\r\n");
		osw.write("   // 从类的名字中解析出表名\r\n");
		osw.write("   String tableName = cName.substring(cName.lastIndexOf('.') + 1,cName.length());\r\n");
		osw.write("   //把key首字母变成小写\r\n");
		osw.write("   tableName = tableName.substring(0,1).toLowerCase()+tableName.substring(1);\r\n");
		osw.write("   try {\r\n");
		osw.write(" 	  ps = DB.getConnection().prepareStatement(\" select * from \" + tableName + \" where id = ?\");\r\n");
		osw.write("       ps.setInt(1, id);  \r\n");
		osw.write("       } catch (SQLException e) {\r\n");
		osw.write(" 	  e.printStackTrace();\r\n");
		osw.write("       }\r\n");
		osw.write("   try {\r\n");
		osw.write("       ResultSet rs = ps.executeQuery();\r\n");
		osw.write("       ResultSetMetaData rsmd = rs.getMetaData();\r\n");
		osw.write("   while(rs.next())\r\n");
		osw.write("   {\r\n");
		osw.write("   isNull = false;\r\n");
		osw.write("   //获得单条数据的列数\r\n");
		osw.write("   int cols = rsmd.getColumnCount();\r\n");
		osw.write("   for (int i = 1; i <= cols; i++) {  \r\n");
		osw.write("     String propertyName = rsmd.getColumnName(i).replaceFirst(rsmd.getColumnName(i).substring(0, 1),rsmd.getColumnName(i).substring(0, 1).toUpperCase()) ;\r\n");
		osw.write("     if(propertyName.contains(\"_id\")){propertyName = propertyName.substring(0, propertyName.length()-3);}\r\n");
		osw.write("     java.lang.reflect.Method getMethod=c.getMethod(\"get\"+propertyName,new Class[]{});\r\n");
		osw.write(" 	//转换类型使之可以被识别\r\n");
		osw.write(" 	obj = Util.convertClass(getMethod, obj,\"set\"+propertyName,rs.getString(i),null);\r\n");	
		osw.write("       }  \r\n");
		osw.write("   for (int i = 1; i <= cols; i++) {   \r\n");
		osw.write("     String propertyName = rsmd.getColumnName(i).replaceFirst(rsmd.getColumnName(i).substring(0, 1),rsmd.getColumnName(i).substring(0, 1).toUpperCase()) ; \r\n");
		osw.write("     if(propertyName.contains(\"_id\")){ \r\n");
		osw.write("     propertyName = propertyName.substring(0, propertyName.length()-3); \r\n");
		osw.write("     Method setMethod=obj.getClass().getMethod(\"set\"+propertyName, new Class[]{Class.forName(Entity_Package+\".\"+propertyName)}); \r\n");
		osw.write("     if(rs.getString(i)==null){setMethod.invoke(obj, new Object[]{null}); }\r\n");
		osw.write("     else{setMethod.invoke(obj, new Object[]{getChildById(propertyName,Integer.valueOf(rs.getString(i)))});}\r\n");
		osw.write("       }else{ \r\n");
	    	osw.write("     java.lang.reflect.Method getMethod=c.getMethod(\"get\"+propertyName,new Class[]{}); \r\n");
	    	osw.write("     //转换类型使之可以被识别 \r\n");
	    	osw.write("     obj = Util.convertClass(getMethod, obj,\"set\"+propertyName,rs.getString(i),null); \r\n");
	   	osw.write("       }  \r\n");
		osw.write("     }  \r\n");
		osw.write(" 	}\r\n");
		osw.write("   } catch (SQLException e) {\r\n");
		osw.write(" 	e.printStackTrace();\r\n");
		osw.write(" 	} \r\n");
		osw.write("   if(!isNull){\r\n");
		osw.write("	   return ("+UobjectName+")obj;\r\n");
		osw.write("	   }else {\r\n");
		osw.write("		return null;\r\n");
		osw.write("	}\r\n");
		osw.write("  }\r\n");
		osw.write("  \r\n");
		osw.write(" \r\n");
		osw.write("//查询数据返回"+LobjectName+"List对象\r\n");
		osw.write("@SuppressWarnings(\"unchecked\")\r\n");
		osw.write("public static  List<"+UobjectName+"> get"+UobjectName+"List() throws InstantiationException, IllegalAccessException, SecurityException, NoSuchMethodException, SQLException, FileNotFoundException, IOException, ClassNotFoundException, NumberFormatException, IllegalArgumentException, InvocationTargetException {\r\n");
		osw.write("  List<"+UobjectName+"> "+LobjectName+"List = new ArrayList<"+UobjectName+">();  \r\n");
		osw.write("  String sql = \"select id from "+LobjectName+" \";\r\n");
		osw.write("  ps = DB.getConnection().prepareStatement(sql);\r\n");
		osw.write("  ResultSet rs = ps.executeQuery();\r\n");
		osw.write("  while(rs.next())\r\n");
		osw.write("  {\r\n");
		osw.write("  int id = rs.getInt(1);\r\n");
		osw.write(   LobjectName+"List.add(get"+UobjectName+"ById(id));\r\n");
		osw.write("  }\r\n");
		osw.write("  return "+LobjectName+"List;\r\n");
		osw.write("  }\r\n");
		osw.write("  \r\n");
		osw.write("//删除一条"+UobjectName+"数据(返回sql语句)\r\n");
		osw.write("/***\r\n");
		osw.write(" *参数说明:id为删除对象的主键,isCascade表示是否级联删除(既删除对象的同时删除子对象对应的数据) \r\n");
		osw.write(" */\r\n");
		osw.write("@SuppressWarnings(\"unchecked\")\r\n");
		osw.write("public static void delete"+UobjectName+"(int id,boolean... isCascade) throws SQLException, NumberFormatException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException{\r\n");
		osw.write(" Connection conn=null;\r\n");
		osw.write(" boolean b = false;\r\n");
		osw.write("	//为true则删除时删除子对象\r\n");
		osw.write("	if(isCascade.length>=1 && isCascade[0]){b = true;}\r\n");
		osw.write("	Object childObject = null;\r\n");
		osw.write(" Object object = get"+UobjectName+"ById(id); \r\n");
		osw.write(" if(object==null){System.out.println(\"id为\"+id+\"的"+UobjectName+"对象不存在,无法删除.\");return ;} \r\n");
		osw.write(" Class c = object.getClass();\r\n");
		osw.write(" methods = c.getMethods();\r\n");
		osw.write("	// 得到对象类的名字\r\n");
		osw.write("	String cName = c.getName(); \r\n");
		osw.write("	// 从类的名字中解析出表名\r\n");
		osw.write("	String tableName = cName.substring(cName.lastIndexOf(\".\") + 1,cName.length()); \r\n");
		osw.write("	//把key首字母变成小写\r\n");
		osw.write("	tableName = tableName.substring(0,1).toLowerCase()+tableName.substring(1);\r\n");
		osw.write(" if(b){\r\n");
		osw.write("		for (Method method : methods) { \r\n");
	    	osw.write("		//循环获取对象中的方法名,也就是get,set方法\r\n");
		osw.write("		String mName = method.getName(); \r\n");
		osw.write("		//判断，去掉对象中默认存在的getClass方法\r\n");
		osw.write("		if (mName.startsWith(\"get\") && !mName.startsWith(\"getClass\")) { \r\n");
		osw.write("		//截取key的名字\r\n");
		osw.write("		String fieldName = mName.substring(3, mName.length()); \r\n");
		osw.write("     //把key首字母变成小写\r\n");
		osw.write("		//fieldName = fieldName.substring(0,1).toLowerCase()+fieldName.substring(1);\r\n");
		osw.write("     if(method.getReturnType().toString().contains(\"class \"+Entity_Package)){\r\n");
		osw.write("     java.lang.reflect.Method getMethod=c.getMethod(\"get\"+fieldName,new Class[]{});\r\n");
		osw.write("     childObject = getMethod.invoke(object);\r\n");
		osw.write("     deleteChild(childObject);\r\n");
		osw.write("       }\r\n");
		osw.write("    }\r\n");
		osw.write("   }\r\n");
		osw.write("}\r\n");
		osw.write("	String sql = \"delete from \" + tableName + \" where id = \"+id;\r\n");
		osw.write("	if(TransactionSql.length()==0){\r\n");
		osw.write("	ps = DB.getConnection().prepareStatement(\"delete from \"+tableName+\" where id=?\");\r\n");
		osw.write("	ps.setInt(1, id);\r\n");
		osw.write(" int f = ps.executeUpdate();\r\n");
		osw.write(" if(f==1){System.out.println(\"删除id为\"+id+\"的"+UobjectName+"对象成功:\");System.out.println(\"删除"+UobjectName+"的语句: delete from \" + tableName + \" where id =\"+ id);}else{System.out.println(\"id为\"+id+\"的"+UobjectName+"对象,删除失败.\");}\r\n");
		osw.write("}else{\r\n");
		osw.write("try {\r\n");
		osw.write(" int count = 0;\r\n");
		osw.write(" TransactionSql+=sql+\";\\n\";\r\n");
		osw.write(" conn = DB.getConnection();\r\n");
		osw.write(" conn.setAutoCommit(false);\r\n");
		osw.write(" for(int i=0;i<TransactionSql.split(\";\\n\").length;i++){\r\n");
		osw.write("  ps = conn.prepareStatement((TransactionSql.split(\";\"))[i]);\r\n");
		osw.write("  ps.execute();\r\n");
		osw.write("  ps=conn.prepareStatement(\"select row_count();\");\r\n");
		osw.write("  rs = ps.executeQuery();\r\n");
		osw.write("  if(rs.next()){count+=rs.getInt(1);}\r\n");
		osw.write(" }\r\n");
		osw.write(" conn.commit();\r\n");
		osw.write(" System.out.print(\"删除\"+object.getClass().getSimpleName()+\"执行事务成功的sql\");\r\n");
		osw.write(" System.out.println(\"(影响的数据行共\"+count+\"行):\");\r\n");
		osw.write(" System.out.println(TransactionSql);\r\n");
		osw.write(" } catch (SQLException e) {\r\n");
		osw.write(" conn.rollback();\r\n");
		osw.write("   System.err.println(\"删除发生错误,执行回滚.\");\r\n");
		osw.write("   System.err.println(\"发生错误的语句:\"+TransactionSql);\r\n");
		osw.write("   e.printStackTrace();\r\n");
		osw.write("   }finally{\r\n");
	    	osw.write("   TransactionSql=\"\";\r\n");
		osw.write("   ps.close();\r\n");
		osw.write("  }\r\n");
		osw.write("}\r\n");
		osw.write("      }\r\n");
		}
		osw.write(" \r\n");
		osw.write("//获得一条子对象的数据(返回sql语句)\r\n");
		osw.write("@SuppressWarnings({ \"unused\", \"unchecked\" })\r\n");
		osw.write(" private static Object getChildById(String objectName,int id)  throws SecurityException, NoSuchMethodException, InstantiationException, IllegalAccessException, ClassNotFoundException, NumberFormatException, IllegalArgumentException, InvocationTargetException {\r\n");
		osw.write("   boolean isNull = true;\r\n");
		osw.write("   PreparedStatement ps=null;\r\n");
		osw.write("   Class c = Class.forName(Entity_Package+\".\"+objectName);\r\n");
		osw.write("   Object obj = c.newInstance();\r\n");
		osw.write("   // 得到对象类的名字\r\n");
		osw.write("   String cName = c.getName();\r\n");
		osw.write("   // 从类的名字中解析出表名\r\n");
		osw.write("   String tableName = cName.substring(cName.lastIndexOf('.') + 1,cName.length());\r\n");
		osw.write("   //把key首字母变成小写\r\n");
		osw.write("   tableName = tableName.substring(0,1).toLowerCase()+tableName.substring(1);\r\n");
		osw.write("   try {\r\n");
		osw.write(" 	 ps = DB.getConnection().prepareStatement(\" select * from \" + tableName + \" where id = \"+id);\r\n");
		osw.write("       } catch (SQLException e) {\r\n");
		osw.write("          e.printStackTrace();\r\n");
		osw.write("       }\r\n");
		osw.write("	  try {\r\n");
		osw.write("      ResultSet rs = ps.executeQuery();\r\n");
		osw.write("      ResultSetMetaData rsmd = rs.getMetaData();\r\n");
		osw.write("   while(rs.next())\r\n");
		osw.write("    {\r\n");
		osw.write("    isNull = false;\r\n");
		osw.write("    //获得单条数据的列数\r\n");
		osw.write("    int cols = rsmd.getColumnCount();\r\n");
		osw.write("    for (int i = 1; i <= cols; i++) {  \r\n");
		osw.write("    String propertyName = rsmd.getColumnName(i).replaceFirst(rsmd.getColumnName(i).substring(0, 1),rsmd.getColumnName(i).substring(0, 1).toUpperCase()) ;\r\n");
		osw.write("    if(propertyName.contains(\"_id\")){\r\n");
		osw.write("    propertyName = propertyName.substring(0, propertyName.length()-3);\r\n");
		osw.write("	   Method setMethod=obj.getClass().getMethod(\"set\"+propertyName, new Class[]{Class.forName(Entity_Package+\".\"+propertyName)});\r\n");
		osw.write("    setMethod.invoke(obj, new Object[]{getChildById(propertyName,Integer.valueOf(rs.getString(i)))});\r\n");
		osw.write("	   }else{\r\n");
		osw.write("    java.lang.reflect.Method getMethod=c.getMethod(\"get\"+propertyName,new Class[]{});\r\n");
		osw.write("    //转换类型使之可以被识别\r\n");
		osw.write("    obj = Util.convertClass(getMethod, obj,\"set\"+propertyName,rs.getString(i),null);\r\n");
		osw.write("    } \r\n");
		osw.write("   }\r\n");
		osw.write("  }\r\n");
		osw.write(" } catch (SQLException e) {\r\n");
		osw.write("    e.printStackTrace();\r\n");
		osw.write(" } \r\n");
		osw.write("  if(!isNull){ \r\n");
		osw.write("	   return obj; \r\n");
		osw.write("	   }else { \r\n");
		osw.write("		return null; \r\n");
		osw.write("	} \r\n");
		osw.write(" }\r\n");
		osw.write(" \r\n");
		osw.write("//删除一条子对象的数据(返回sql语句)\r\n");
		osw.write("@SuppressWarnings({ \"unused\", \"unchecked\" })\r\n");
		osw.write("private static String deleteChild(Object object) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException{\r\n");
		osw.write(" Object childObject=null;\r\n");
		osw.write(" String sql=\"\";\r\n");
		osw.write(" if(object==null){return \"对象为null\";}\r\n");
		osw.write("	Class c = object.getClass();\r\n");
		osw.write(" methods = c.getMethods();\r\n");
		osw.write("	// 得到对象类的名字\r\n");
		osw.write(" String cName = c.getName(); \r\n");
		osw.write(" // 从类的名字中解析出表名\r\n");
		osw.write(" String tableName = cName.substring(cName.lastIndexOf(\".\") + 1,cName.length()); \r\n");
		osw.write(" //把key首字母变成小写\r\n");
		osw.write(" tableName = tableName.substring(0,1).toLowerCase()+tableName.substring(1);\r\n");
		osw.write(" for (Method method : methods) { \r\n");
		osw.write("  //循环获取对象中的方法名,也就是get,set方法\r\n");
		osw.write("  String mName = method.getName(); \r\n");
		osw.write("  //判断，去掉对象中默认存在的getClass方法\r\n");
		osw.write("  if (mName.startsWith(\"get\") && !mName.startsWith(\"getClass\")) { \r\n");
	    	osw.write("  //截取key的名字\r\n");
		osw.write("  String fieldName = mName.substring(3, mName.length()); \r\n");
		osw.write("	 if(method.getReturnType().toString().contains(\"class \"+Entity_Package)){\r\n");
		osw.write("  java.lang.reflect.Method getMethod=c.getMethod(\"get\"+fieldName,new Class[]{});\r\n");
		osw.write("  childObject = getMethod.invoke(object);\r\n");
		osw.write("  deleteChild(childObject);\r\n");
		osw.write("     }\r\n");
		osw.write("   }\r\n");
		osw.write("  }\r\n");
		osw.write(" java.lang.reflect.Method getMethod=c.getMethod(\"getId\",new Class[]{});\r\n");
		osw.write(" int id  = Integer.valueOf(String.valueOf(getMethod.invoke(object)));\r\n");
		osw.write(" sql = \"delete from \" + tableName + \" where id = \"+id;\r\n");
		osw.write(" TransactionSql+=sql+\";\\n\";\r\n");
		osw.write(" return sql;\r\n");
		osw.write(" }\r\n");
	    	osw.write("}\r\n");
		osw.close();
		System.out.println("写入文件："+ javafile+ "成功！");
}
	}
